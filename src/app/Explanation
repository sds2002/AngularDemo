Summary: Angular Generics Example
Purpose

Demonstrates how to use TypeScript generics in Angular to create a reusable, type-safe service for fetching data from APIs.

Works for any model (e.g., User, Product) without duplicating code.

1. Models

User and Product interfaces define the structure of data objects.

interface User { id: number; name: string; email: string; }
interface Product { id: number; title: string; price: number; }

2. Generic Service

GenericApiService uses TypeScript generics (<T>) to handle multiple types.

getData<T>(url: string): Observable<T[]> { ... }
getItem<T>(url: string, id: number): Observable<T> { ... }


âœ… Benefits:

One service handles multiple models.

Type-safe API calls.

3. Component

AppComponent uses the generic service to fetch and display User[] and Product[].

this.api.getData<User>(url).subscribe(data => this.users = data);
this.api.getData<Product>(url).subscribe(data => this.products = data);


Uses templateUrl to separate HTML (app.component.html) from TypeScript.

4. Module

AppModule imports BrowserModule and HttpClientModule.

Declares and bootstraps AppComponent.

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  bootstrap: [AppComponent]
})

5. HTML Template

Displays lists of users and products using *ngFor.

<h2>Users</h2>
<ul><li *ngFor="let user of users">{{ user.name }}</li></ul>

<h2>Products</h2>
<ul><li *ngFor="let product of products">{{ product.title }}</li></ul>

Key Takeaways

Generics (<T>) allow writing reusable and type-safe services.

HttpClient + generics = clean API data fetching.

Separation of concerns: Logic in TypeScript, template in HTML.

Avoids repeating similar code for different models.